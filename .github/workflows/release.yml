name: Build and Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
jobs:
  build:
    name: Build for ${{ matrix.target }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Get project info
        id: info
        run: |
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          echo "project_name=$(grep -m 1 'name = ' Cargo.toml | cut -d'"' -f2)" >> $GITHUB_OUTPUT
      - name: Build and Package
        shell: bash
        run: |
          ARTIFACT_DIR="dist"
          mkdir -p $ARTIFACT_DIR
          cargo build --release --target ${{ matrix.target }}
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            mv "target/${{ matrix.target }}/release/${{ steps.info.outputs.project_name }}.exe" "$ARTIFACT_DIR/${{ steps.info.outputs.project_name }}-${{ steps.info.outputs.version }}-${{ matrix.name }}.exe"
          else
            BINARY_NAME="${{ steps.info.outputs.project_name }}"
            ARCHIVE_NAME="${{ steps.info.outputs.project_name }}-${{ steps.info.outputs.version }}-${{ matrix.name }}.tar.gz"
            tar -czvf "$ARTIFACT_DIR/$ARCHIVE_NAME" -C "target/${{ matrix.target }}/release" "$BINARY_NAME"
          fi
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: dist/*
  build-wheels:
    name: Build Python wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release --out dist
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}
          path: dist/*
  release:
    name: Create GitHub Release
    needs: [build, build-wheels]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: artifacts/*/*